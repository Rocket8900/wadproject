// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "./seed/seed.js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id           String        @id @default(uuid())
  selfie       String?
  age          Int
  name         String
  email        String        @unique
  password     String // hashed!
  gender       String
  type         String // enums("auto", "manual")
  language     String
  instructor   Instructor?   @relation(fields: [instructorId], references: [id])
  instructorId String?
  quiz         Quiz[]
  reviews      Review[]
  bookings     Booking[]
  chatHistory  ChatHistory[]
}

model Instructor {
  id           String        @id @default(uuid())
  picture      String[]
  name         String
  age          Int
  affiliation  String // SSDC, CDC, BBDC
  gender       String
  email        String        @unique
  password     String
  language     String
  experience   Int
  type         String // enums("auto", "manual", "both")
  carModel     String
  students     Student[]
  availability DateTime[]
  bookings     Booking[]
  reviews      Review[]
  chatHistory  ChatHistory[]
}

model Booking {
  id           String     @id @default(uuid())
  lesson       Json[]
  studentId    String
  instructorId String
  status       String     @default("PENDING") // pending, accepted, ongoing, rejected, cancelled
  student      Student    @relation(fields: [studentId], references: [id])
  instructor   Instructor @relation(fields: [instructorId], references: [id])
}

model ChatHistory {
  studentId    String
  instructorId String
  message      Json[]
  student      Student    @relation(fields: [studentId], references: [id])
  instructor   Instructor @relation(fields: [instructorId], references: [id])

  @@id([studentId, instructorId])
}

model Review {
  id           String     @id @default(uuid())
  studentId    String
  instructorId String
  rating       Float
  student      Student    @relation(fields: [studentId], references: [id])
  instructor   Instructor @relation(fields: [instructorId], references: [id])

  @@unique([studentId, instructorId])
}

model Scene {
  id      String  @id @default(uuid())
  key     String // s3 key
  options Json[] // {wrong: {id: XXX}, correct: {id: XXX}}
  origin  Boolean
}

model Quiz {
  id         String   @id @default(uuid())
  studentId  String
  type       String // btt or ftt
  score      String // "10/10"
  mistakes   Int[] // index of questions wrong
  created_at DateTime @default(now())
  student    Student  @relation(fields: [studentId], references: [id])
}
